/*
Today, we'll see implementation of set of pairs
*/

#include <bits/stdc++.h>
#include <unordered_set>
#include <set>
using namespace std;

int main()
{
    //set<pair<int,int>> ost;
    unordered_set<pair<int,int>> ust;
    return 0;
}

//	The above code shows error

#include <bits/stdc++.h>
#include <unordered_set>
#include <set>
using namespace std;

int main()
{
    set<pair<int,int>> ost;
    //unordered_set<pair<int,int>> ust;
    return 0;
}

//	However, this one doesn't. A similar thing happens in case of maps also. unordered_map<pair<int,int>> shows error but map<pair<int,int>> doesn't.
//	Application :
//	https://www.interviewbit.com/problems/3-sum-zero/
//	The solution to the above problem is very similar to the code written on gfg under method 3 (https://www.geeksforgeeks.org/find-triplets-array-whose-sum-equal-zero/)
//  However, the gfg code also prints duplicate triplets.
//	This gfg code can be slightly modified using set of pair and the code below works perfectly fine in this problem (https://www.interviewbit.com/problems/3-sum-zero/)

#define ll long long int
vector<vector<int> > Solution::threeSum(vector<int> &arr) {
    ll n=arr.size();
    vector<vector<ll>> ans;
    sort(arr.begin(),arr.end());
    set<pair<ll,ll>> st;
    for (ll i=0; i<n-1; i++)
    {
        ll l = i + 1;
        ll r = n - 1;
        ll x = arr[i];
        while (l < r)
        {
            if (x + arr[l] + arr[r] == 0)
            {
                pair<ll,ll> p1=make_pair(arr[l],arr[r]);
                if(st.find(p1)==st.end()){
                    vector<ll> small;
                    small.push_back(x);
                    small.push_back(arr[l]);
                    small.push_back(arr[r]);
                    ans.push_back(small);
                    st.insert(p1);
                }
                l++;
                r--;
            }
            else if (x + arr[l] + arr[r] < 0)
                l++;
            else
                r--;
        }
    }
    vector<vector<int>> fans;
    for(int i=0;i<ans.size();i++){
        vector<int> tmp;
        for(int j=0;j<ans[i].size();j++){
            tmp.push_back((int)ans[i][j]);
        }
        fans.push_back(tmp);
    }
    return fans;
}
